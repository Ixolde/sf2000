<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>Data Frog SF2000 Boot Logo Changer</title>
    <meta name="viewport" content="width=device-width">
    <link rel="stylesheet" href="tools.css">
  </head>
  <body>
    <h1>Data Frog SF2000 Boot Logo Changer</h1>
    <p>This tool can be used to alter the boot logo on an SF2000 handheld gaming console. Please note this tool is provided as-is, and no support will be given if this corrupts your device's bios; make sure you have backups of anything you care about before messing with your device's critical files! ðŸ™‚</p>
    <hr>
    <div id="steps">
      <section id="bisrvSection">
        <h2>Step 1: Select Original <code>bisrv.asd</code></h2>
        <p>Select the <code>bisrv.asd</code> file whose boot logo you want to modify. You should probably make a backup of the file first, just in case! You can find the <code>bisrv.asd</code> file in the <code>bios</code> folder on your microSD card.</p>
        <div id="bisrvMessages"></div>
        <div class="controlContainer">
          <label class = "control">Open 
            <code>bisrv.asd</code>: 
            <input id="birsvSelector" type="file" accept=".asd" onchange="bisrvLoad(event.target.files[0])">
          </label>
        </div>
      </section>    
    </div>

    <script src="tools.js"></script>
    <script type="text/javascript">

      // Global variables...
      let logoOffset;             // Will contain the offset of the boot logo within the bisrv.asd file
      let newLogoData;            // Used to store raw ImageData of the new boot logo
      let ditherEnabled = false;  // Holds whether the user wants to enable dithering for RGB565 mode or not
      let ditherStrength = 0.2;   // Holds the selected dither strength value - 0.2 seems to be a good general balance

//  =======================================================================================================================
//  =======================================================================================================================
      let fileIsValid = false;

        function bisrvLoad(file) {
        const msg = document.getElementById('bisrvMessages');
        msg.innerHTML = '';

        const validFile = 'bisrv.asd';

        if (!file || file.name !== validFile) {
          msg.innerHTML = `<p style="color:red">Please select the correct file named <code>bisrv.asd</code>.</p>`;
          fileIsValid = false;
        } else {
          msg.innerHTML = `<p style="font-size: 24px; text-align: center; font-weight: bold; color: white"> File <code>${file.name}</code> loaded successfully.</p>`;
          fileIsValid = true;
        }

        updateProceedButtonVisibility();
      }
        
      function showVersionDropdown() {              //  Show version selector dropdown
          if (document.getElementById('versionDropdownSection'))
          return;

          const section = document.createElement('section');
          section.id = 'versionDropdownSection';

          const label = document.createElement('h2');
          label.textContent = 'Select your BIOS version:';
          label.style.color = 'white';
          label.style.fontSize = '24px';
          label.style.textAlign = 'center';
          label.style.fontWeight = 'bold';

          const controlContainer = document.createElement('div');
          controlContainer.className = 'controlContainer';
          controlContainer.style.display = 'flex';
          controlContainer.style.justifyContent = 'center';
          controlContainer.style.marginTop = '10px';

          const selectLabel = document.createElement('label');
          selectLabel.className = 'control';
          selectLabel.setAttribute('for', 'biosVersion');

          const select = document.createElement('select');
          select.id = 'biosVersion';

          selectLabel.appendChild(select);

          const defaultOption = document.createElement('option');
          defaultOption.value = '';
          defaultOption.disabled = true;
          defaultOption.selected = true;
          defaultOption.textContent = 'select version';
          select.appendChild(defaultOption);
          
          const versions = ['03.15', '04.20', '05.15', '05.22', '08.03', '10.07', '10.13'];
          versions.forEach(version => {
            const option = document.createElement('option');
            option.value = version;
            option.textContent = version;
            select.appendChild(option);
          });

          select.addEventListener('change', updateProceedButtonVisibility);

          controlContainer.appendChild(selectLabel);

          const proceedButton = document.createElement('button');
          proceedButton.id = 'proceedButton';
          proceedButton.textContent ='Proceed with Selected Version';
          proceedButton.style.display = 'none';    //  Hidden by default.
          proceedButton.style.margin = '20px auto';
          proceedButton.style.padding = '10px 20px';
          proceedButton.style.fontSize = '20px';
          proceedButton.style.cursor = 'pointer';
          proceedButton.style.color = '#498280';
          proceedButton.style.backgroundColor = 'E0E0E0';
          proceedButton.style.border = '10px solid #F0F0F0';
          proceedButton.style.borderRadius = '5px';
          proceedButton.style.fontWeight = 'bold';

          proceedButton.onclick = () => {
            const selectedVersion = select.value;
            if (!selectedVersion) {
              alert('Please select a BIOS version before continuing.');
              return;
            }
            console.log('Selected BIOS version:', selectedVersion);
            stepTwo();
          };

          section.appendChild(label);
          section.appendChild(controlContainer);
          section.appendChild(proceedButton);

          const steps = document.getElementById('steps');
          steps.appendChild(section);
        }

        document.addEventListener('DOMContentLoaded', () => {
          showVersionDropdown();

        })

        function updateProceedButtonVisibility() {
          const select = document.getElementById('biosVersion');
          const proceedButton = document.getElementById('proceedButton');

          if (!select || !proceedButton)
          return;

          const selectedVersion = select.value;
          if(fileIsValid && selectedVersion) {
            proceedButton.style.display = 'block';

          } else {
            proceedButton.style.display = 'none';
          }

        }
//  =======================================================================================================================
//  =======================================================================================================================

// This function triggers when the user has selected a known `bisrv.asd`
      // variant...
      function stepTwo() {

        // We're going to build up the HTML for Step 2, which has the user
        // browse for a PNG or JPEG image file. We need to validate the chosen
        // file is an image, and that it has the correct dimensions of 256x100
        // pixels; if it is, we convert the image data to an SF2000 format and
        // move on to Step 3. First, let's start building our HTML...
        let html = "<section id=\"imageSection\"><h2>Step 2: Select New Logo Image File</h2><p>Select the image file you want to use as the new boot logo. It must be 256 pixels wide and 100 pixels tall. Only PNG and JPEG image types are supported. For PNG files, transparency is handled by drawing the image on a black background; also, you might want to make sure your PNG image has any embedded gamma or colour profile information removed first using a metadata scrubbing tool, otherwise the colour output from <i>this</i> tool might be incorrect. On the SF2000, the boot logo is displayed centred on a black background, so you may want to factor that into your design as well. You can also optionally enable dithering, and control its strength - dithering can help to remove banding artifacts caused by reducing an image's colour depth, by adding patterned noise to the image (the pattern scatters the edge of the bands, making them harder to perceive).</p><div id=\"imageMessages\"></div>";

        // Add our file chooser and dithering controls...
        html += "<form id=\"imageForm\" class=\"controlContainer\"><div class=\"control\">";
        html += "<label class=\"control\"><input id=\"inputImage\" type=\"file\"></label>";
        html += "<div class=\"control\"><label for=\"ditherEnabled\">Dithering: <input type=\"checkbox\" id=\"ditherEnabled\" name=\"ditherEnabled\"" + (ditherEnabled == true ? " checked" : "") + "></label> <label for=\"ditherStrength\">Strength: <select id=\"ditherStrength\" name=\"ditherStrength\"><option" + (ditherStrength == 0.1 ? " selected" : "") + ">0.1</option><option" + (ditherStrength == 0.2 ? " selected" : "") + ">0.2</option><option" + (ditherStrength == 0.3 ? " selected" : "") + ">0.3</option><option" + (ditherStrength == 0.5 ? " selected" : "") + ">0.5</option><option" + (ditherStrength == 0.75 ? " selected" : "") + ">0.75</option><option" + (ditherStrength == 1.0 ? " selected" : "") + ">1</option><option" + (ditherStrength == 2.0 ? " selected" : "") + ">2</option></select></label></div>";
        html += "</div></form>";

        // Next we'll add our image preview...
        html += "<div id=\"previewContainer\" class=\"controlContainer\" style=\"display: none;\"><div class=\"control\"><canvas id=\"processFilePreview\" width=\"256\" height=\"100\"></canvas></div></div>";

        // Close our section...
        html += "</section>";

        // Finally, add a <hr> separator after the last step, and append the new
        // step...
        document.getElementById("steps").insertAdjacentHTML("beforeend", "<hr>");
        document.getElementById("steps").insertAdjacentHTML("beforeend", html);

        // Attach our event handler to our new file input control...
        const userImageInput = document.getElementById("inputImage");
        userImageInput.addEventListener("change", function() {

          // The user has chosen a new file; it should be either a PNG or JPEG
          // image for converting to an SF2000 binary image format...

          // First let's clear any old messages...
          document.getElementById("imageMessages").innerHTML = "";

          // ... and make sure our preview image is hidden...
          document.getElementById("previewContainer").style.display = "none";

          // ... and clear our newLogoData object ...
          newLogoData = new ImageData(1, 1);

          // And clear up any HTML already added after the current step...
          while(document.getElementById("imageSection").nextSibling) {
            document.getElementById("imageSection").nextSibling.remove();
          }

          // Now let's read in the file...
          const frImage = new FileReader();
          frImage.readAsDataURL(event.target.files[0]);
          frImage.onload = function(event) {

            // The file is loaded; let's check to make sure we got a PNG or
            // JPEG...
            if (!event.target.result.includes("data:image/png;") && !event.target.result.includes("data:image/jpeg;")) {

              // Whoops! Doesn't look like the user provided a PNG or a JPEG!
              setMessage("error", "imageMessages", "ERROR: The selected file does not appear to be either a PNG or JPEG image; please make sure you're selecting an appropriate image file.");
              return;
            }
            
            // Now we're going to load the file's data into an Image object, so
            // we can access the raw image data...
            const img = new Image;
            img.src = event.target.result;
            img.onload = function(event) {

              // Check to make sure the image has the correct dimensions for a
              // boot logo...
              if (img.width != 256 || img.height != 100) {
                setMessage("error", "imageMessages", "ERROR: The selected image does not have dimensions of 256 x 100!");
                return;
              }

              // If we're here, the image is good - store its data in our
              // global...
              newLogoData = imageToImageData(img, false);

              // And finally, let's show our preview image...
              document.getElementById("previewContainer").style.display = "flex";
              renderPreview();

              // On to Step 3!
              stepThree();
            }
          }
        });

        // And finally, attach an event handler to the overall form - we'll use
        // this to get the dithering settings, and as the trigger for updating
        // the preview image accordingly...
        const imageForm = document.getElementById("imageForm");
        imageForm.addEventListener("change", function() {

          // Get the state of all of our form controls...
          const formData = Object.fromEntries(new FormData(imageForm));

          // Set our general globals from the current form state...
          //if (formData.ditherEnabled !== undefined) {ditherEnabled = true;}
          //else if (imageFormat == "RGB565") {ditherEnabled = false;}
          ditherEnabled = formData.ditherEnabled ? true : false;
          ditherStrength = formData.ditherStrength? parseFloat(formData.ditherStrength) : ditherStrength;

          // Finally render an updated preview...
          renderPreview();
        });
      }

      // This function is where we display our download button, which patches
      // the provided bisrv.asd with the updated logo data, and sends it to the
      // user's browser as a download...
      function stepThree() {

        // As usual, start building up our HTML...
        let html = "<section id=\"downloadSection\"><h2>Step 3: Download Updated <code>bisrv.asd</code></h2><p>Click the download button for the updated <code>bisrv.asd</code> file; use it to replace the one in the <code>bios</code> folder on your SF2000's microSD card.</p><div id=\"downloadMessages\"></div>";

        // Add our download button...
        html += "<div class=\"controlContainer\"><div class=\"control\"><input id=\"userDownload\" type=\"button\" value=\"Download\"></div></div>";

        // Close our section...
        html += "</section>";

        // Finally, add a <hr> separator after the last step, and append the new
        // step...
        document.getElementById("steps").insertAdjacentHTML("beforeend", "<hr>");
        document.getElementById("steps").insertAdjacentHTML("beforeend", html);

        // Let's add the event handler for our Download button...
        const dButton = document.getElementById("userDownload");
        dButton.addEventListener("click", function() {

          // So, we should have the original bisrv.asd data in bisrvData; and we
          // should have the offset to the original logo data in logoOffset; and
          // finally, we should have our new logo's binary data in newLogoData.
          // All we need to do is convert the new logo to RGB565 format (using
          // whatever dithering options are set), and then replace the old data
          // bytes with the new bytes, re-calculate the CRC32 bytes for the
          // modified file and set them in the data, and send the data to the
          // user's browser. Easy!

          // First, get the RGB565 version of the logo; this is a *bit* messy,
          // as we take the user's raw input image, convert it to binary RGB565
          // data, then convert it back to an ImageData object so we can upscale
          // it with a 2x nearest neighbour upscale, and then convert the result
          // *back* to an RGB565 binary array... dumb, but it works!
          const convertedImage = imageDataToRgb565(scaleImage(rgb565ToImageData(imageDataToRgb565(newLogoData, ditherEnabled, ditherStrength), 256, 100), 512, 200, "Nearest Neighbour"));

          // Now replace the old logo data in the bisrv.asd file...
          for (let i = 0; i < convertedImage.length; i++) {
            bisrvData[logoOffset + i] = convertedImage[i];
          }

          // Next, patch the CRC32 value in the bisrv.asd to account for the new
          // logo data...
          patchCRC32(bisrvData);

          // And finally, send the updated bisrv.asd data to the user's browser
          // as a file download...
          downloadToBrowser(bisrvData, "application/octet-stream", "bisrv.asd");
        });
      }

      // This utility function renders a preview of the final image...
      function renderPreview() {
        if (newLogoData.data.length > 4) {
          let convertedImageData = imageDataToRgb565(newLogoData, ditherEnabled, ditherStrength);
          convertedImageData = rgb565ToImageData(convertedImageData, 256, 100);
          const previewCanvas = document.getElementById("processFilePreview");
          const previewContext = previewCanvas.getContext("2d");
          previewContext.clearRect(0, 0, 256, 100);
          previewContext.putImageData(convertedImageData, 0, 0);
        }
      }
    </script>
    <hr>
    <p><a rel="license" href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>: public domain. Version 1.6, 20240514.1</p>
  </body>
</html>
